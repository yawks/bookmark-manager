/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TagsRouteImport } from './routes/tags'
import { Route as CollectionsRouteImport } from './routes/collections'
import { Route as TagsTagIdRouteImport } from './routes/tags.$tagId'
import { Route as CollectionsCollectionIdRouteImport } from './routes/collections.$collectionId'

const IndexLazyRouteImport = createFileRoute('/')()

const TagsRoute = TagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsRoute = CollectionsRouteImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const TagsTagIdRoute = TagsTagIdRouteImport.update({
  id: '/$tagId',
  path: '/$tagId',
  getParentRoute: () => TagsRoute,
} as any)
const CollectionsCollectionIdRoute = CollectionsCollectionIdRouteImport.update({
  id: '/$collectionId',
  path: '/$collectionId',
  getParentRoute: () => CollectionsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/collections': typeof CollectionsRouteWithChildren
  '/tags': typeof TagsRouteWithChildren
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
  '/tags/$tagId': typeof TagsTagIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/collections': typeof CollectionsRouteWithChildren
  '/tags': typeof TagsRouteWithChildren
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
  '/tags/$tagId': typeof TagsTagIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/collections': typeof CollectionsRouteWithChildren
  '/tags': typeof TagsRouteWithChildren
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
  '/tags/$tagId': typeof TagsTagIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/collections'
    | '/tags'
    | '/collections/$collectionId'
    | '/tags/$tagId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/collections'
    | '/tags'
    | '/collections/$collectionId'
    | '/tags/$tagId'
  id:
    | '__root__'
    | '/'
    | '/collections'
    | '/tags'
    | '/collections/$collectionId'
    | '/tags/$tagId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CollectionsRoute: typeof CollectionsRouteWithChildren
  TagsRoute: typeof TagsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tags': {
      id: '/tags'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof TagsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections': {
      id: '/collections'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tags/$tagId': {
      id: '/tags/$tagId'
      path: '/$tagId'
      fullPath: '/tags/$tagId'
      preLoaderRoute: typeof TagsTagIdRouteImport
      parentRoute: typeof TagsRoute
    }
    '/collections/$collectionId': {
      id: '/collections/$collectionId'
      path: '/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof CollectionsCollectionIdRouteImport
      parentRoute: typeof CollectionsRoute
    }
  }
}

interface CollectionsRouteChildren {
  CollectionsCollectionIdRoute: typeof CollectionsCollectionIdRoute
}

const CollectionsRouteChildren: CollectionsRouteChildren = {
  CollectionsCollectionIdRoute: CollectionsCollectionIdRoute,
}

const CollectionsRouteWithChildren = CollectionsRoute._addFileChildren(
  CollectionsRouteChildren,
)

interface TagsRouteChildren {
  TagsTagIdRoute: typeof TagsTagIdRoute
}

const TagsRouteChildren: TagsRouteChildren = {
  TagsTagIdRoute: TagsTagIdRoute,
}

const TagsRouteWithChildren = TagsRoute._addFileChildren(TagsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CollectionsRoute: CollectionsRouteWithChildren,
  TagsRoute: TagsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
